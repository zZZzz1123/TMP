public class Res
{
	private static short[] mSina = new short[360]
	{
		0, 174, 348, 523, 697, 871, 1045, 1218, 1391, 1564,
		1736, 1908, 2079, 2249, 2419, 2588, 2756, 2923, 3090, 3255,
		3420, 3583, 3746, 3907, 4067, 4226, 4383, 4539, 4694, 4848,
		4999, 5150, 5299, 5446, 5591, 5735, 5877, 6018, 6156, 6293,
		6427, 6560, 6691, 6819, 6946, 7071, 7193, 7313, 7431, 7547,
		7660, 7771, 7880, 7986, 8090, 8191, 8290, 8386, 8480, 8571,
		8660, 8746, 8829, 8910, 8987, 9063, 9135, 9205, 9271, 9335,
		9396, 9455, 9510, 9563, 9612, 9659, 9702, 9743, 9781, 9816,
		9848, 9876, 9902, 9925, 9945, 9961, 9975, 9986, 9993, 9998,
		10000, 9998, 9993, 9986, 9975, 9961, 9945, 9925, 9902, 9876,
		9848, 9816, 9781, 9743, 9702, 9659, 9612, 9563, 9510, 9455,
		9396, 9335, 9271, 9205, 9135, 9063, 8987, 8910, 8829, 8746,
		8660, 8571, 8480, 8386, 8290, 8191, 8090, 7986, 7880, 7771,
		7660, 7547, 7431, 7313, 7193, 7071, 6946, 6819, 6691, 6560,
		6427, 6293, 6156, 6018, 5877, 5735, 5591, 5446, 5299, 5150,
		4999, 4848, 4694, 4539, 4383, 4226, 4067, 3907, 3746, 3583,
		3420, 3255, 3090, 2923, 2756, 2588, 2419, 2249, 2079, 1908,
		1736, 1564, 1391, 1218, 1045, 871, 697, 523, 348, 174,
		12246, -174, -348, -523, -697, -871, -1045, -1218, -1391, -1564,
		-1736, -1908, -2079, -2249, -2419, -2588, -2756, -2923, -3090, -3255,
		-3420, -3583, -3746, -3907, -4067, -4226, -4383, -4539, -4694, -4848,
		-5000, -5150, -5299, -5446, -5591, -5735, -5877, -6018, -6156, -6293,
		-6427, -6560, -6691, -6819, -6946, -7071, -7193, -7313, -7431, -7547,
		-7660, -7771, -7880, -7986, -8090, -8191, -8290, -8386, -8480, -8571,
		-8660, -8746, -8829, -8910, -8987, -9063, -9135, -9205, -9271, -9335,
		-9396, -9455, -9510, -9563, -9612, -9659, -9702, -9743, -9781, -9816,
		-9848, -9876, -9902, -9925, -9945, -9961, -9975, -9986, -9993, -9998,
		-10000, -9998, -9993, -9986, -9975, -9961, -9945, -9925, -9902, -9876,
		-9848, -9816, -9781, -9743, -9702, -9659, -9612, -9563, -9510, -9455,
		-9396, -9335, -9271, -9205, -9135, -9063, -8987, -8910, -8829, -8746,
		-8660, -8571, -8480, -8386, -8290, -8191, -8090, -7986, -7880, -7771,
		-7660, -7547, -7431, -7313, -7193, -7071, -6946, -6819, -6691, -6560,
		-6427, -6293, -6156, -6018, -5877, -5735, -5591, -5446, -5299, -5150,
		-5000, -4848, -4694, -4539, -4383, -4226, -4067, -3907, -3746, -3583,
		-3420, -3255, -3090, -2923, -2756, -2588, -2419, -2249, -2079, -1908,
		-1736, -1564, -1391, -1218, -1045, -871, -697, -523, -348, -174
	};

	private static short[] mCosa = new short[360]
	{
		10000, 9998, 9993, 9986, 9975, 9961, 9945, 9925, 9902, 9876,
		9848, 9816, 9781, 9743, 9702, 9659, 9612, 9563, 9510, 9455,
		9396, 9335, 9271, 9205, 9135, 9063, 8987, 8910, 8829, 8746,
		8660, 8571, 8480, 8386, 8290, 8191, 8090, 7986, 7880, 7771,
		7660, 7547, 7431, 7313, 7193, 7071, 6946, 6819, 6691, 6560,
		6427, 6293, 6156, 6018, 5877, 5735, 5591, 5446, 5299, 5150,
		5000, 4848, 4694, 4539, 4383, 4226, 4067, 3907, 3746, 3583,
		3420, 3255, 3090, 2923, 2756, 2588, 2419, 2249, 2079, 1908,
		1736, 1564, 1391, 1218, 1045, 871, 697, 523, 348, 174,
		1232, -174, -348, -523, -697, -871, -1045, -1218, -1391, -1564,
		-1736, -1908, -2079, -2249, -2419, -2588, -2756, -2923, -3090, -3255,
		-3420, -3583, -3746, -3907, -4067, -4226, -4383, -4539, -4694, -4848,
		-4999, -5150, -5299, -5446, -5591, -5735, -5877, -6018, -6156, -6293,
		-6427, -6560, -6691, -6819, -6946, -7071, -7193, -7313, -7431, -7547,
		-7660, -7771, -7880, -7986, -8090, -8191, -8290, -8386, -8480, -8571,
		-8660, -8746, -8829, -8910, -8987, -9063, -9135, -9205, -9271, -9335,
		-9396, -9455, -9510, -9563, -9612, -9659, -9702, -9743, -9781, -9816,
		-9848, -9876, -9902, -9925, -9945, -9961, -9975, -9986, -9993, -9998,
		-1, -9998, -9993, -9986, -9975, -9961, -9945, -9925, -9902, -9876,
		-9848, -9816, -9781, -9743, -9702, -9659, -9612, -9563, -9510, -9455,
		-9396, -9335, -9271, -9205, -9135, -9063, -8987, -8910, -8829, -8746,
		-8660, -8571, -8480, -8386, -8290, -8191, -8090, -7986, -7880, -7771,
		-7660, -7547, -7431, -7313, -7193, -7071, -6946, -6819, -6691, -6560,
		-6427, -6293, -6156, -6018, -5877, -5735, -5591, -5446, -5299, -5150,
		-5000, -4848, -4694, -4539, -4383, -4226, -4067, -3907, -3746, -3583,
		-3420, -3255, -3090, -2923, -2756, -2588, -2419, -2249, -2079, -1908,
		-1736, -1564, -1391, -1218, -1045, -871, -697, -523, -348, -174,
		-18369, 174, 348, 523, 697, 871, 1045, 1218, 1391, 1564,
		1736, 1908, 2079, 2249, 2419, 2588, 2756, 2923, 3090, 3255,
		3420, 3583, 3746, 3907, 4067, 4226, 4383, 4539, 4694, 4848,
		5000, 5150, 5299, 5446, 5591, 5735, 5877, 6018, 6156, 6293,
		6427, 6560, 6691, 6819, 6946, 7071, 7193, 7313, 7431, 7547,
		7660, 7771, 7880, 7986, 8090, 8191, 8290, 8386, 8480, 8571,
		8660, 8746, 8829, 8910, 8987, 9063, 9135, 9205, 9271, 9335,
		9396, 9455, 9510, 9563, 9612, 9659, 9702, 9743, 9781, 9816,
		9848, 9876, 9902, 9925, 9945, 9961, 9975, 9986, 9993, 9998
	};

	private static short[] sina = new short[91]
	{
		0, 18, 36, 54, 71, 89, 107, 125, 143, 160,
		178, 195, 213, 230, 248, 265, 282, 299, 316, 333,
		350, 367, 384, 400, 416, 433, 449, 465, 481, 496,
		512, 527, 543, 558, 573, 587, 602, 616, 630, 644,
		658, 672, 685, 698, 711, 724, 737, 749, 761, 773,
		784, 796, 807, 818, 828, 839, 849, 859, 868, 878,
		887, 896, 904, 912, 920, 928, 935, 943, 949, 956,
		962, 968, 974, 979, 984, 989, 994, 998, 1002, 1005,
		1008, 1011, 1014, 1016, 1018, 1020, 1022, 1023, 1023, 1024,
		1024
	};

	private static short[] cosa;

	private static int[] tana;

	public static MyRandom r = new MyRandom();

	public static short mCos(int angle)
	{
		return mCosa[angle];
	}

	public static short mSin(int angle)
	{
		return mSina[angle];
	}

	public static void init()
	{
		cosa = new short[91];
		tana = new int[91];
		for (int i = 0; i <= 90; i++)
		{
			cosa[i] = sina[90 - i];
			if (cosa[i] == 0)
			{
				tana[i] = int.MaxValue;
			}
			else
			{
				tana[i] = (sina[i] << 10) / cosa[i];
			}
		}
	}

	public static int sin(int a)
	{
		a = fixangle(a);
		if (a >= 0 && a < 90)
		{
			return sina[a];
		}
		if (a >= 90 && a < 180)
		{
			return sina[180 - a];
		}
		if (a >= 180 && a < 270)
		{
			return -sina[a - 180];
		}
		return -sina[360 - a];
	}

	public static int cos(int a)
	{
		a = fixangle(a);
		if (a >= 0 && a < 90)
		{
			return cosa[a];
		}
		if (a >= 90 && a < 180)
		{
			return -cosa[180 - a];
		}
		if (a >= 180 && a < 270)
		{
			return -cosa[a - 180];
		}
		return cosa[360 - a];
	}

	public static int tan(int a)
	{
		a = fixangle(a);
		if (a >= 0 && a < 90)
		{
			return tana[a];
		}
		if (a >= 90 && a < 180)
		{
			return -tana[180 - a];
		}
		if (a >= 180 && a < 270)
		{
			return tana[a - 180];
		}
		return -tana[360 - a];
	}

	public static int atan(int a)
	{
		for (int i = 0; i <= 90; i++)
		{
			if (tana[i] >= a)
			{
				return i;
			}
		}
		return 0;
	}

	public static int angle(int dx, int dy)
	{
		int num;
		if (dx != 0)
		{
			int a = Math.abs((dy << 10) / dx);
			num = atan(a);
			if (dy >= 0 && dx < 0)
			{
				num = 180 - num;
			}
			if (dy < 0 && dx < 0)
			{
				num = 180 + num;
			}
			if (dy < 0 && dx >= 0)
			{
				num = 360 - num;
			}
		}
		else
		{
			num = ((dy <= 0) ? 270 : 90);
		}
		return num;
	}

	public static int fixangle(int angle)
	{
		if (angle >= 360)
		{
			angle -= 360;
		}
		if (angle < 0)
		{
			angle += 360;
		}
		return angle;
	}

	public static int xetVX(int goc, int d)
	{
		return cos(fixangle(goc)) * d >> 10;
	}

	public static int xetVY(int goc, int d)
	{
		return sin(fixangle(goc)) * d >> 10;
	}

	public static int random(int a, int b)
	{
		if (a == b)
		{
			return a;
		}
		return a + r.nextInt(b - a);
	}

	public static int s2tick(int currentTimeMillis)
	{
		int num = 0;
		num = currentTimeMillis * 16 / 1000;
		if (currentTimeMillis * 16 % 1000 >= 5)
		{
			num++;
		}
		return num;
	}

	public static int distance(int x1, int y1, int x2, int y2)
	{
		return sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2));
	}

	public static int sqrt(int a)
	{
		if (a <= 0)
		{
			return 0;
		}
		int num = (a + 1) / 2;
		int num2;
		do
		{
			num2 = num;
			num = num / 2 + a / (2 * num);
		}
		while (Math.abs(num2 - num) > 1);
		return num;
	}

	public static int rnd(int a)
	{
		return r.nextInt(a);
	}

	public static int rnd(int a, int b)
	{
		if (r.nextInt(2) == 0)
		{
			return a;
		}
		return b;
	}

	public static int abs(int i)
	{
		return (i <= 0) ? (-i) : i;
	}

	public static bool inRect(int x1, int y1, int width, int height, int x2, int y2)
	{
		return x2 >= x1 && x2 <= x1 + width && y2 >= y1 && y2 <= y1 + height;
	}

	public static string[] split(string original, string separator, int count)
	{
		int num = original.IndexOf(separator);
		string[] array;
		if (num >= 0)
		{
			array = split(original.Substring(num + separator.Length), separator, count + 1);
		}
		else
		{
			array = new string[count + 1];
			num = original.Length;
		}
		array[count] = original.Substring(0, num);
		return array;
	}

	public static Image rotateImage(Image src, int angle, mGraphics g, int x, int y, bool isRGB)
	{
		return src;
	}
}
